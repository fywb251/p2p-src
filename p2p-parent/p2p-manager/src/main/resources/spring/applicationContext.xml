<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
                        http://www.springframework.org/schema/task 
                        http://www.springframework.org/schema/task/spring-task-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">
	<import resource="classpath*:spring/database-config.xml" />
	<import resource="classpath*:spring/fast-dfs.xml" />
	<import resource="classpath*:spring/applicationContext-shiro.xml" />
	<task:annotation-driven />
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.herongwang.p2p.service">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 事务管理器, Jdbc单数据源事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="com.sxj.mybatis.orm.ActiveSQLSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.herongwang.p2p.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:/mapper/**/*Mapper.xml" />

	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.herongwang.p2p.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 配置多级缓存 -->
	<bean id="cacheManager" class="com.sxj.cache.manager.HierarchicalCacheManager"
		lazy-init="false" init-method="initCacheProvider">
		<!-- <property name="configFile" value="cache.properties"></property> -->
		<property name="databaseId" value="2"></property>
	</bean>
	<!-- <bean id="redisConcurrent" class="com.sxj.redis.advance.RedisConcurrent">
		<constructor-arg index="0">
			<bean class="com.sxj.redis.advance.Config">
				<property name="singleServerConfig">
					<bean class="com.sxj.redis.advance.SingleServerConfig">
						<property name="address" value="${redis.host}:${redis.port}"></property>
						<property name="database" value="0"></property>
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	<bean id="redisCollections" class="com.sxj.redis.advance.RedisCollections">
		<constructor-arg index="0">
			<bean class="com.sxj.redis.advance.Config">
				<property name="singleServerConfig">
					<bean class="com.sxj.redis.advance.SingleServerConfig">
						<property name="address" value="${redis.host}:${redis.port}"></property>
						<property name="database" value="0"></property>
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	<bean id="redisTopics" class="com.sxj.redis.advance.topic.RedisTopics">
		<constructor-arg index="0">
			<bean class="com.sxj.redis.advance.Config">
				<property name="singleServerConfig">
					<bean class="com.sxj.redis.advance.SingleServerConfig">
						<property name="address" value="${redis.host}:${redis.port}"></property>
						<property name="database" value="0"></property>
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean> -->
	<bean id="redisConcurrent" class="com.sxj.redis.core.concurrent.RedisConcurrent">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<bean id="redisCollections" class="com.sxj.redis.core.collections.RedisCollections">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<bean id="redisTopics" class="com.sxj.redis.core.pubsub.RedisTopics">
		<constructor-arg index="0">
			<value>config/redis-advance.properties</value>
		</constructor-arg>
	</bean>
	<!-- <bean class="com.herongwang.p2p.service.CometServiceImpl" /> -->
	
	<!-- 定时任务测试 -->
	<bean id="loanJob" class="com.herongwang.p2p.manage.auth.LoanJob" />
    <bean id="auditJob" class="com.herongwang.p2p.manage.auth.AuditJob" />
    
    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="studyDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject" ref="loanJob" />
        <!-- 调用类中的方法 -->
        <property name="targetMethod" value="execute" />
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="false"/>
    </bean>
    <bean id="auditDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject" ref="auditJob" />
        <!-- 调用类中的方法 -->
        <property name="targetMethod" value="execute" />
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="false"/>
    </bean>
     
    <!-- quartz-2.x的配置 -->
     <!-- 定义触发时间 -->
    <bean id="myJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="studyDetail" />
        </property>
        <property name="cronExpression" value="0 20 11 * * ?" />  
    </bean>
     <bean id="auditJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="auditDetail" />
        </property>
        <property name="cronExpression" value="0 54 15 * * ?" />  
    </bean>  
     <!-- <bean id="myJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">  
		<property name="jobDetail" ref="studyDetail" />  
		<property name="startDelay" value="10" />调度工厂实例化后，经过0秒开始执行调度  
		<property name="repeatInterval" value="2000" />每2秒调度一次  
	</bean>  -->
     
    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <!-- 如果lazy-init='true',则需要实例化该bean才能执行调度程序 -->
    <bean name="startQuertz" lazy-init="false" autowire="no"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myJobTrigger" />
                <ref bean="auditJobTrigger" />
            </list>
        </property>
    </bean>
</beans>
